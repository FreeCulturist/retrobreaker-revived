br.usp.ime.retrobreaker.GameActivity -> br.usp.ime.retrobreaker.GameActivity:
    br.usp.ime.retrobreaker.game.TouchSurfaceView mTouchSurfaceView -> a
    android.os.Handler mHandler -> b
    android.widget.TextView mScoreTextView -> c
    android.widget.TextView mScoreMultiplierTextView -> d
    android.widget.TextView mLivesTextView -> e
    android.widget.TextView mHighScoreTextView -> f
    android.widget.TextView mReadyTextView -> g
    android.content.SharedPreferences mSharedPrefs -> h
    android.content.SharedPreferences$Editor mSharedPrefsEditor -> i
    long mHighScore -> j
    boolean mNewHighScore -> k
    boolean mFinish -> l
    android.media.SoundPool mSoundPool -> m
    java.util.HashMap mSoundIds -> n
    android.view.View mDecorView -> o
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void showGameOverDialog(long,boolean) -> a
    void restartGame() -> a
    void updateUI() -> b
    boolean access$0(br.usp.ime.retrobreaker.GameActivity) -> a
    void access$1(br.usp.ime.retrobreaker.GameActivity) -> b
    void access$2(br.usp.ime.retrobreaker.GameActivity) -> c
    android.widget.TextView access$3(br.usp.ime.retrobreaker.GameActivity) -> d
    android.widget.TextView access$4(br.usp.ime.retrobreaker.GameActivity) -> e
    android.widget.TextView access$5(br.usp.ime.retrobreaker.GameActivity) -> f
    long access$6(br.usp.ime.retrobreaker.GameActivity) -> g
    void access$7(br.usp.ime.retrobreaker.GameActivity,long) -> a
    void access$8(br.usp.ime.retrobreaker.GameActivity,boolean) -> a
    android.widget.TextView access$9(br.usp.ime.retrobreaker.GameActivity) -> h
    android.widget.TextView access$10(br.usp.ime.retrobreaker.GameActivity) -> i
    boolean access$11(br.usp.ime.retrobreaker.GameActivity) -> j
    void access$12(br.usp.ime.retrobreaker.GameActivity,long,boolean) -> a
    android.content.SharedPreferences$Editor access$13(br.usp.ime.retrobreaker.GameActivity) -> k
    android.media.SoundPool access$14(br.usp.ime.retrobreaker.GameActivity) -> l
    java.util.HashMap access$15(br.usp.ime.retrobreaker.GameActivity) -> m
    void access$16(br.usp.ime.retrobreaker.GameActivity,boolean) -> b
br.usp.ime.retrobreaker.GameActivity$1 -> br.usp.ime.retrobreaker.a:
    br.usp.ime.retrobreaker.GameActivity this$0 -> a
    void run() -> run
br.usp.ime.retrobreaker.GameActivity$2 -> br.usp.ime.retrobreaker.b:
    br.usp.ime.retrobreaker.GameActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
br.usp.ime.retrobreaker.GameActivity$3 -> br.usp.ime.retrobreaker.c:
    br.usp.ime.retrobreaker.GameActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
br.usp.ime.retrobreaker.GameActivity$4 -> br.usp.ime.retrobreaker.d:
    br.usp.ime.retrobreaker.GameActivity this$0 -> a
    void run() -> run
br.usp.ime.retrobreaker.MainActivity -> br.usp.ime.retrobreaker.MainActivity:
    android.widget.TextView mHighScoreTextView -> a
    android.widget.Button mNewGameButton -> b
    android.widget.Button mResetScoreButton -> c
    android.widget.Spinner mLevelSpinner -> d
    android.widget.CheckBox mSoundEffectsCheckBox -> e
    android.content.SharedPreferences mSharedPrefs -> f
    int mRickRoll -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onCheckBoxClicked(android.view.View) -> onCheckBoxClicked
    void updateScoreTextView() -> a
    void easterEggRickRoll() -> b
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    android.content.SharedPreferences access$0(br.usp.ime.retrobreaker.MainActivity) -> a
    void access$1(br.usp.ime.retrobreaker.MainActivity) -> b
    int access$2(br.usp.ime.retrobreaker.MainActivity) -> c
    void access$3(br.usp.ime.retrobreaker.MainActivity,int) -> a
    void access$4(br.usp.ime.retrobreaker.MainActivity) -> d
br.usp.ime.retrobreaker.MainActivity$1 -> br.usp.ime.retrobreaker.e:
    br.usp.ime.retrobreaker.MainActivity this$0 -> a
    void onClick(android.view.View) -> onClick
br.usp.ime.retrobreaker.MainActivity$2 -> br.usp.ime.retrobreaker.f:
    br.usp.ime.retrobreaker.MainActivity this$0 -> a
    void onClick(android.view.View) -> onClick
br.usp.ime.retrobreaker.MainActivity$3 -> br.usp.ime.retrobreaker.g:
    br.usp.ime.retrobreaker.MainActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
br.usp.ime.retrobreaker.effects.Explosion -> br.usp.ime.retrobreaker.a.a:
    java.lang.String TAG -> a
    br.usp.ime.retrobreaker.forms.Particle[] mParticles -> b
    int mState -> c
    boolean isAlive() -> a
    void update() -> b
    void draw(javax.microedition.khronos.opengles.GL10) -> a
br.usp.ime.retrobreaker.forms.Ball -> br.usp.ime.retrobreaker.b.a:
    float[] VERTICES -> a
    float mPrevPosX -> h
    float mPrevPosY -> i
    float mSlope -> j
    boolean mUndefinedSlope -> k
    float mTrajectoryIncrement -> l
    int[] $SWITCH_TABLE$br$usp$ime$retrobreaker$game$Constants$Hit -> m
    float getY2InEquation(float,float,float) -> a
    float getX2InEquation(float,float,float) -> b
    br.usp.ime.retrobreaker.game.Constants$BallDirection getDirection() -> a
    void turnToPerpendicularDirection(br.usp.ime.retrobreaker.game.Constants$Hit) -> a
    void turnByAngle(float) -> a
    float getSlope() -> b
    java.lang.String toString() -> toString
    void move() -> c
    int[] $SWITCH_TABLE$br$usp$ime$retrobreaker$game$Constants$Hit() -> d
br.usp.ime.retrobreaker.forms.Brick -> br.usp.ime.retrobreaker.b.b:
    float[] VERTICES -> a
    int mLives -> h
    br.usp.ime.retrobreaker.forms.Brick$Type mType -> i
    int[] $SWITCH_TABLE$br$usp$ime$retrobreaker$forms$Brick$Type -> j
    void decrementLives() -> a
    int getLives() -> b
    br.usp.ime.retrobreaker.forms.Brick$Type getType() -> c
    int[] $SWITCH_TABLE$br$usp$ime$retrobreaker$forms$Brick$Type() -> d
br.usp.ime.retrobreaker.forms.Brick$Type -> br.usp.ime.retrobreaker.b.c:
    br.usp.ime.retrobreaker.forms.Brick$Type NORMAL -> a
    br.usp.ime.retrobreaker.forms.Brick$Type EXPLOSIVE -> b
    br.usp.ime.retrobreaker.forms.Brick$Type HARD -> c
    br.usp.ime.retrobreaker.forms.Brick$Type MOBILE -> d
    br.usp.ime.retrobreaker.forms.Brick$Type[] ENUM$VALUES -> e
    br.usp.ime.retrobreaker.forms.Brick$Type[] values() -> values
    br.usp.ime.retrobreaker.forms.Brick$Type valueOf(java.lang.String) -> valueOf
br.usp.ime.retrobreaker.forms.MobileBrick -> br.usp.ime.retrobreaker.b.d:
    int mFramesToWait -> a
    int mToWait -> h
    float mSpeedX -> i
    boolean mCollided -> j
    int mIndexI -> k
    int mIndexJ -> l
    int getIndexI() -> e
    int getIndexJ() -> f
    void move() -> g
    void invertDirection() -> h
    boolean detectCollisionWithBrick(br.usp.ime.retrobreaker.forms.Brick) -> a
    boolean detectCollisionWithWall() -> i
    boolean equal(int,int) -> a
br.usp.ime.retrobreaker.forms.Paddle -> br.usp.ime.retrobreaker.b.e:
    float[] VERTICES -> a
br.usp.ime.retrobreaker.forms.Particle -> br.usp.ime.retrobreaker.b.f:
    float[] VERTICES -> h
    float MAX_SPEED -> a
    int mState -> i
    double mXv -> j
    double mYv -> k
    int mAge -> l
    int mLifetime -> m
    boolean isAlive() -> a
    double rndDbl(double,double) -> a
    void move() -> b
    void update() -> c
br.usp.ime.retrobreaker.forms.Quad -> br.usp.ime.retrobreaker.b.g:
    java.lang.String TAG -> b
    float mPosX -> c
    float mPosY -> d
    float mScale -> e
    float[] mVertices -> f
    float[] mColors -> g
    java.nio.FloatBuffer mVertexBuffer -> a
    java.nio.FloatBuffer mColorBuffer -> h
    void setColor(float[]) -> a
    float getPosX() -> j
    float getPosY() -> k
    java.lang.String toString() -> toString
    float getLeftX() -> l
    float getBottomY() -> m
    float getTopY() -> n
    float getRightX() -> o
    float getWidth() -> p
    float getHeight() -> q
    float getSizeX() -> r
    float getSizeY() -> s
    void setPosX(float) -> b
    void setPosY(float) -> c
    void draw(javax.microedition.khronos.opengles.GL10) -> a
br.usp.ime.retrobreaker.game.Constants -> br.usp.ime.retrobreaker.game.a:
br.usp.ime.retrobreaker.game.Constants$BallDirection -> br.usp.ime.retrobreaker.game.b:
    br.usp.ime.retrobreaker.game.Constants$BallDirection RIGHT_UPWARD -> a
    br.usp.ime.retrobreaker.game.Constants$BallDirection LEFT_UPWARD -> b
    br.usp.ime.retrobreaker.game.Constants$BallDirection RIGHT_DOWNWARD -> c
    br.usp.ime.retrobreaker.game.Constants$BallDirection LEFT_DOWNWARD -> d
    br.usp.ime.retrobreaker.game.Constants$BallDirection UPWARD -> e
    br.usp.ime.retrobreaker.game.Constants$BallDirection DOWNWARD -> f
    br.usp.ime.retrobreaker.game.Constants$BallDirection UNKNOWN_DIRECTION -> g
    br.usp.ime.retrobreaker.game.Constants$BallDirection[] ENUM$VALUES -> h
    br.usp.ime.retrobreaker.game.Constants$BallDirection[] values() -> values
    br.usp.ime.retrobreaker.game.Constants$BallDirection valueOf(java.lang.String) -> valueOf
br.usp.ime.retrobreaker.game.Constants$Collision -> br.usp.ime.retrobreaker.game.c:
    br.usp.ime.retrobreaker.game.Constants$Collision NOT_AVAILABLE -> a
    br.usp.ime.retrobreaker.game.Constants$Collision WALL_RIGHT_LEFT_SIDE -> b
    br.usp.ime.retrobreaker.game.Constants$Collision WALL_TOP_BOTTOM_SIDE -> c
    br.usp.ime.retrobreaker.game.Constants$Collision PADDLE_BALL -> d
    br.usp.ime.retrobreaker.game.Constants$Collision BRICK_BALL -> e
    br.usp.ime.retrobreaker.game.Constants$Collision EX_BRICK_BALL -> f
    br.usp.ime.retrobreaker.game.Constants$Collision LIFE_LOST -> g
    br.usp.ime.retrobreaker.game.Constants$Collision[] ENUM$VALUES -> h
    br.usp.ime.retrobreaker.game.Constants$Collision[] values() -> values
    br.usp.ime.retrobreaker.game.Constants$Collision valueOf(java.lang.String) -> valueOf
br.usp.ime.retrobreaker.game.Constants$Color -> br.usp.ime.retrobreaker.game.d:
    float[] GRAY_RGB -> a
    float[] WHITE_RGB -> b
    float[] BLACK_RGB -> c
    float[] RED_RGB -> d
    float[] BLUE_RGB -> e
    float[] GREEN_RGB -> f
    float[] WHITE -> g
    float[] GRAY -> h
    float[] RED -> i
    float[] GREEN -> j
br.usp.ime.retrobreaker.game.Constants$Config -> br.usp.ime.retrobreaker.game.e:
    br.usp.ime.retrobreaker.game.Constants$Collision[] CONSECUTIVE_COLLISION_DETECTION -> a
br.usp.ime.retrobreaker.game.Constants$Difficult -> br.usp.ime.retrobreaker.game.f:
    boolean[] INVINCIBILITY -> a
    int[] LIFE_STOCK -> b
    int[] HIT_SCORE -> c
    int[] LIFE_SCORE_BONUS -> d
    int[] MAX_SCORE_MULTIPLIER -> e
    float[] BALL_SPEED -> f
    float[] GREY_BRICK_PROB -> g
    float[] EX_BRICK_PROB -> h
    float[] MOBILE_BRICK_PROB -> i
    float[] MOBILE_BRICK_SPEED -> j
br.usp.ime.retrobreaker.game.Constants$Hit -> br.usp.ime.retrobreaker.game.g:
    br.usp.ime.retrobreaker.game.Constants$Hit RIGHT_LEFT -> a
    br.usp.ime.retrobreaker.game.Constants$Hit TOP_BOTTOM -> b
    br.usp.ime.retrobreaker.game.Constants$Hit[] ENUM$VALUES -> c
    br.usp.ime.retrobreaker.game.Constants$Hit[] values() -> values
    br.usp.ime.retrobreaker.game.Constants$Hit valueOf(java.lang.String) -> valueOf
br.usp.ime.retrobreaker.game.Constants$Lives -> br.usp.ime.retrobreaker.game.h:
    br.usp.ime.retrobreaker.game.Constants$Lives RESTART_LEVEL -> a
    br.usp.ime.retrobreaker.game.Constants$Lives LOST_LIFE -> b
    br.usp.ime.retrobreaker.game.Constants$Lives[] ENUM$VALUES -> c
    br.usp.ime.retrobreaker.game.Constants$Lives[] values() -> values
    br.usp.ime.retrobreaker.game.Constants$Lives valueOf(java.lang.String) -> valueOf
br.usp.ime.retrobreaker.game.Constants$Score -> br.usp.ime.retrobreaker.game.i:
    br.usp.ime.retrobreaker.game.Constants$Score RESTART_LEVEL -> a
    br.usp.ime.retrobreaker.game.Constants$Score BRICK_HIT -> b
    br.usp.ime.retrobreaker.game.Constants$Score EX_BRICK_HIT -> c
    br.usp.ime.retrobreaker.game.Constants$Score[] ENUM$VALUES -> d
    br.usp.ime.retrobreaker.game.Constants$Score[] values() -> values
    br.usp.ime.retrobreaker.game.Constants$Score valueOf(java.lang.String) -> valueOf
br.usp.ime.retrobreaker.game.Constants$ScoreMultiplier -> br.usp.ime.retrobreaker.game.j:
    br.usp.ime.retrobreaker.game.Constants$ScoreMultiplier RESTART_LEVEL -> a
    br.usp.ime.retrobreaker.game.Constants$ScoreMultiplier LOST_LIFE -> b
    br.usp.ime.retrobreaker.game.Constants$ScoreMultiplier PADDLE_HIT -> c
    br.usp.ime.retrobreaker.game.Constants$ScoreMultiplier BRICK_HIT -> d
    br.usp.ime.retrobreaker.game.Constants$ScoreMultiplier[] ENUM$VALUES -> e
    br.usp.ime.retrobreaker.game.Constants$ScoreMultiplier[] values() -> values
    br.usp.ime.retrobreaker.game.Constants$ScoreMultiplier valueOf(java.lang.String) -> valueOf
br.usp.ime.retrobreaker.game.Game -> br.usp.ime.retrobreaker.game.k:
    java.lang.String TAG -> a
    br.usp.ime.retrobreaker.forms.Paddle mPaddle -> b
    br.usp.ime.retrobreaker.forms.Ball mBall -> c
    br.usp.ime.retrobreaker.forms.Brick[][] mBricks -> d
    android.media.SoundPool mSoundPool -> e
    java.util.HashMap mSoundIds -> f
    android.content.Context mContext -> g
    java.util.List mExplosions -> h
    java.util.List mMobileBricks -> i
    java.util.HashMap mConsecutiveCollision -> j
    int[] $SWITCH_TABLE$br$usp$ime$retrobreaker$game$Constants$Collision -> k
    void resetElements() -> a
    void createLevel(int,int,float,float) -> a
    void drawElements(javax.microedition.khronos.opengles.GL10) -> a
    void updateBrickExplosion() -> e
    void updatePaddlePosX(float) -> a
    float calcReflectedAngle(float,float) -> a
    br.usp.ime.retrobreaker.game.Constants$Collision detectConsecutiveCollision(br.usp.ime.retrobreaker.game.Constants$Collision) -> a
    void updateState() -> b
    void moveMobileBricks() -> f
    void brickExploded(int,int) -> b
    void decrementBrickLife(int,int) -> c
    void detectCollisionOfMobileBricks() -> g
    br.usp.ime.retrobreaker.game.Constants$Collision detectCollision() -> h
    void deleteMobileBrick(int,int) -> a
    java.lang.String access$0() -> c
    int[] $SWITCH_TABLE$br$usp$ime$retrobreaker$game$Constants$Collision() -> d
br.usp.ime.retrobreaker.game.Game$State -> br.usp.ime.retrobreaker.game.l:
    long sScore -> a
    int sScoreMultiplier -> b
    int sLives -> c
    boolean sGameOver -> d
    float sScreenHigherY -> e
    float sScreenLowerY -> f
    float sScreenHigherX -> g
    float sScreenLowerX -> h
    boolean sGamePaused -> i
    int sDifficult -> j
    float sVolume -> k
    int[] $SWITCH_TABLE$br$usp$ime$retrobreaker$game$Constants$Score -> l
    int[] $SWITCH_TABLE$br$usp$ime$retrobreaker$game$Constants$ScoreMultiplier -> m
    int[] $SWITCH_TABLE$br$usp$ime$retrobreaker$game$Constants$Lives -> n
    void setScore(br.usp.ime.retrobreaker.game.Constants$Score) -> a
    void setScoreMultiplier(br.usp.ime.retrobreaker.game.Constants$ScoreMultiplier) -> a
    void setLives(br.usp.ime.retrobreaker.game.Constants$Lives) -> a
    void setDifficult(int) -> a
    void setGameOver(boolean) -> a
    void setGamePaused(boolean) -> b
    void setVolume(float) -> a
    void enableSoundEffects(boolean) -> c
    boolean getGameOver() -> a
    boolean getGamePaused() -> b
    long getScore() -> c
    int getScoreMultiplier() -> d
    int getLives() -> e
    float getScreenLowerX() -> f
    float getScreenHigherX() -> g
    float getScreenLowerY() -> h
    float getScreenHigherY() -> i
    void setScreenMeasures(float,float) -> a
    int getDifficult() -> j
    float getVolume() -> k
    int[] $SWITCH_TABLE$br$usp$ime$retrobreaker$game$Constants$Score() -> l
    int[] $SWITCH_TABLE$br$usp$ime$retrobreaker$game$Constants$ScoreMultiplier() -> m
    int[] $SWITCH_TABLE$br$usp$ime$retrobreaker$game$Constants$Lives() -> n
br.usp.ime.retrobreaker.game.TouchSurfaceView -> br.usp.ime.retrobreaker.game.TouchSurfaceView:
    java.lang.String TAG -> a
    long mPrevFrameTime -> b
    long mCurrentTime -> c
    long mElapsedTime -> d
    long mLag -> e
    br.usp.ime.retrobreaker.game.TouchSurfaceView$Renderer mRenderer -> f
    int mScreenWidth -> g
    int mScreenHeight -> h
    float[] mUnprojectViewMatrix -> i
    float[] mUnprojectProjMatrix -> j
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void access$0(br.usp.ime.retrobreaker.game.TouchSurfaceView,long) -> a
    void access$1(br.usp.ime.retrobreaker.game.TouchSurfaceView,long) -> b
    long access$2(br.usp.ime.retrobreaker.game.TouchSurfaceView) -> a
    long access$3(br.usp.ime.retrobreaker.game.TouchSurfaceView) -> b
    void access$4(br.usp.ime.retrobreaker.game.TouchSurfaceView,long) -> c
    long access$5(br.usp.ime.retrobreaker.game.TouchSurfaceView) -> c
    long access$6(br.usp.ime.retrobreaker.game.TouchSurfaceView) -> d
    void access$7(br.usp.ime.retrobreaker.game.TouchSurfaceView,long) -> d
    java.lang.String access$8() -> a
    void access$9(br.usp.ime.retrobreaker.game.TouchSurfaceView,int) -> a
    void access$10(br.usp.ime.retrobreaker.game.TouchSurfaceView,int) -> b
    float[] access$11(br.usp.ime.retrobreaker.game.TouchSurfaceView) -> e
    float[] access$12(br.usp.ime.retrobreaker.game.TouchSurfaceView) -> f
br.usp.ime.retrobreaker.game.TouchSurfaceView$Renderer -> br.usp.ime.retrobreaker.game.m:
    br.usp.ime.retrobreaker.game.Game mGame -> b
    br.usp.ime.retrobreaker.game.TouchSurfaceView this$0 -> a
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    void updatePaddlePosition(float,float) -> a
    br.usp.ime.retrobreaker.game.Game access$0(br.usp.ime.retrobreaker.game.TouchSurfaceView$Renderer) -> a
br.usp.ime.retrobreaker.game.TouchSurfaceView$Renderer$1 -> br.usp.ime.retrobreaker.game.n:
    br.usp.ime.retrobreaker.game.TouchSurfaceView$Renderer this$1 -> a
    float val$x -> b
    void run() -> run
